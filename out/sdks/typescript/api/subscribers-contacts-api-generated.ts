/* tslint:disable */
/* eslint-disable */
/*
Segnivo Developer API

**API Version**: 1.7

**Date**: 9th July, 2024

## ðŸ“„ Getting Started

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.

Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.

The API must not be abused and should be used within acceptable limits.

To start using this API, you will need not create or access an existing Segnivo account to obtain your API key ([retrievable from your account settings](https://messaging.segnivo.com/account/api)).

- You must use a valid API Key to send requests to the API endpoints.
    
- The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.
    
- The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key or with details in the message key.
    

### ðŸ”– **Need some help?**

In case you have questions or need clarity with interacting with some endpoints feel free to create a support ticket on your account or you can send an email ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)) directly and we would be happy to help.

---

## Authentication

As noted earlier, this API uses API keys for authentication. You can generate a Segnivo API key in the [API](https://messaging.segnivo.com/account/api) section of your account settings.

You must include an API key in each request to this API with the `X-API-KEY` request header.

### Authentication error response

If an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.

## Rate and usage limits

API access rate limits apply on a per-API endpoint basis in unit time. The limit is 10k requests per hour for most endpoints and 1m requests per hour for transactional/relay email-sending endpoints. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code or HTTP 403 if sending credits have been exhausted.

### 503 response

An HTTP `503` response from our servers may indicate there is an unexpected spike in API access traffic, while this rarely happens, we ensure the server is usually operational within the next two to five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, contact support ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)).

### Request headers

To make a successful request, some or all of the following headers must be passed with the request.

| **Header** | **Description** |
| --- | --- |
| Content-Type | Required and should be `application/json` in most cases. |
| Accept | Required and should be `application/json` in most cases |
| Content-Length | Required for `POST`, `PATCH`, and `PUT` requests containing a request body. The value must be the number of bytes rather than the number of characters in the request body. |
| X-API-KEY | Required. Specifies the API key used for authorization. |

##### ðŸ”– Note with example requests and code snippets

If/when you use the code snippets used as example requests, remember to calculate and add the `Content-Length` header. Some request libraries, frameworks, and tools automatically add this header for you while a few do not. Kindly check and ensure yours does or add it yourself.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscribersContactsApi - axios parameter creator
 * @export
 */
export const SubscribersContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of contacts/subscribers on your account  This endpoint accepts three **optional** query parameters  - `email` â€” An email address to search for. If set, the endpoint only returns subscribers that have an identical email address.      - `per_page` â€” A limit on the number of records to return.      - `page` â€” The parameter serves as an offset on the number of records returned.
         * @summary Get contacts
         * @param {string} [accept] 
         * @param {string} [email] An email address to search for.
         * @param {number} [perPage] How many items should be returned ahead.
         * @param {number} [page] The offset for the items to be returned, helps in pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsGet: async (accept?: string, email?: string, perPage?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new contact/subscriber to your mailing list
         * @summary Add a Contact
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsPost: async (contentType?: string, accept?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add tags to an existing contact
         * @summary Add tags to a contact
         * @param {string} uid (Required) The uid of the contact to update with the tags.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidAddTagPost: async (uid: string, contentType?: string, accept?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidAddTagPost', 'uid', uid)
            const localVarPath = `/contacts/{uid}/add-tag`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}/add-tag',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing contact
         * @summary Delete a contact
         * @param {string} uid (Required) The uid of the contact to delete.
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidDeletePost: async (uid: string, accept?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidDeletePost', 'uid', uid)
            const localVarPath = `/contacts/{uid}/delete`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}/delete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch detailed contact information for specified a contact
         * @summary Get a contact
         * @param {string} uid (Required) The uid of the contact to get.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidGet: async (uid: string, accept?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidGet', 'uid', uid)
            const localVarPath = `/contacts/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the specified subscriber/contact
         * @summary Update Contact
         * @param {string} uid (Required) The uid of the contact to update.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidPatch: async (uid: string, contentType?: string, accept?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidPatch', 'uid', uid)
            const localVarPath = `/contacts/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe a contact to a list
         * @summary Subscribe a contact
         * @param {string} uid (Required) The uid of the contact to subscribe.
         * @param {string} [accept] 
         * @param {string} [listUid] (Required) The uid of the mail list to subscribe the contact.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidSubscribePatch: async (uid: string, accept?: string, listUid?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidSubscribePatch', 'uid', uid)
            const localVarPath = `/contacts/{uid}/subscribe`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (listUid !== undefined) {
                localVarQueryParameter['list_uid'] = listUid;
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}/subscribe',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unsubscribe a contact from a list
         * @summary Unsubscribe a contact
         * @param {string} uid (Required) The uid of the contact to unsubscribe.
         * @param {string} [accept] 
         * @param {string} [listUid] (Required) The uid of the mail list to unsubscribe the contact.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidUnsubscribePatch: async (uid: string, accept?: string, listUid?: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('contactsUidUnsubscribePatch', 'uid', uid)
            const localVarPath = `/contacts/{uid}/unsubscribe`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKeyAuth", configuration })
            if (listUid !== undefined) {
                localVarQueryParameter['list_uid'] = listUid;
            }

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{uid}/unsubscribe',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscribersContactsApi - functional programming interface
 * @export
 */
export const SubscribersContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscribersContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of contacts/subscribers on your account  This endpoint accepts three **optional** query parameters  - `email` â€” An email address to search for. If set, the endpoint only returns subscribers that have an identical email address.      - `per_page` â€” A limit on the number of records to return.      - `page` â€” The parameter serves as an offset on the number of records returned.
         * @summary Get contacts
         * @param {SubscribersContactsApiContactsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsGet(requestParameters: SubscribersContactsApiContactsGetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsGet(requestParameters.accept, requestParameters.email, requestParameters.perPage, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new contact/subscriber to your mailing list
         * @summary Add a Contact
         * @param {SubscribersContactsApiContactsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsPost(requestParameters: SubscribersContactsApiContactsPostRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPost(requestParameters.contentType, requestParameters.accept, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add tags to an existing contact
         * @summary Add tags to a contact
         * @param {SubscribersContactsApiContactsUidAddTagPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidAddTagPost(requestParameters: SubscribersContactsApiContactsUidAddTagPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidAddTagPost(requestParameters.uid, requestParameters.contentType, requestParameters.accept, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing contact
         * @summary Delete a contact
         * @param {SubscribersContactsApiContactsUidDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidDeletePost(requestParameters: SubscribersContactsApiContactsUidDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidDeletePost(requestParameters.uid, requestParameters.accept, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch detailed contact information for specified a contact
         * @summary Get a contact
         * @param {SubscribersContactsApiContactsUidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidGet(requestParameters: SubscribersContactsApiContactsUidGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidGet(requestParameters.uid, requestParameters.accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the specified subscriber/contact
         * @summary Update Contact
         * @param {SubscribersContactsApiContactsUidPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidPatch(requestParameters: SubscribersContactsApiContactsUidPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidPatch(requestParameters.uid, requestParameters.contentType, requestParameters.accept, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Subscribe a contact to a list
         * @summary Subscribe a contact
         * @param {SubscribersContactsApiContactsUidSubscribePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidSubscribePatch(requestParameters: SubscribersContactsApiContactsUidSubscribePatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidSubscribePatch(requestParameters.uid, requestParameters.accept, requestParameters.listUid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unsubscribe a contact from a list
         * @summary Unsubscribe a contact
         * @param {SubscribersContactsApiContactsUidUnsubscribePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsUidUnsubscribePatch(requestParameters: SubscribersContactsApiContactsUidUnsubscribePatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsUidUnsubscribePatch(requestParameters.uid, requestParameters.accept, requestParameters.listUid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscribersContactsApi - factory interface
 * @export
 */
export const SubscribersContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscribersContactsApiFp(configuration)
    return {
        /**
         * Returns a list of contacts/subscribers on your account  This endpoint accepts three **optional** query parameters  - `email` â€” An email address to search for. If set, the endpoint only returns subscribers that have an identical email address.      - `per_page` â€” A limit on the number of records to return.      - `page` â€” The parameter serves as an offset on the number of records returned.
         * @summary Get contacts
         * @param {SubscribersContactsApiContactsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsGet(requestParameters: SubscribersContactsApiContactsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new contact/subscriber to your mailing list
         * @summary Add a Contact
         * @param {SubscribersContactsApiContactsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsPost(requestParameters: SubscribersContactsApiContactsPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add tags to an existing contact
         * @summary Add tags to a contact
         * @param {SubscribersContactsApiContactsUidAddTagPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidAddTagPost(requestParameters: SubscribersContactsApiContactsUidAddTagPostRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidAddTagPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing contact
         * @summary Delete a contact
         * @param {SubscribersContactsApiContactsUidDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidDeletePost(requestParameters: SubscribersContactsApiContactsUidDeletePostRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidDeletePost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch detailed contact information for specified a contact
         * @summary Get a contact
         * @param {SubscribersContactsApiContactsUidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidGet(requestParameters: SubscribersContactsApiContactsUidGetRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the specified subscriber/contact
         * @summary Update Contact
         * @param {SubscribersContactsApiContactsUidPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidPatch(requestParameters: SubscribersContactsApiContactsUidPatchRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidPatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe a contact to a list
         * @summary Subscribe a contact
         * @param {SubscribersContactsApiContactsUidSubscribePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidSubscribePatch(requestParameters: SubscribersContactsApiContactsUidSubscribePatchRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidSubscribePatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unsubscribe a contact from a list
         * @summary Unsubscribe a contact
         * @param {SubscribersContactsApiContactsUidUnsubscribePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsUidUnsubscribePatch(requestParameters: SubscribersContactsApiContactsUidUnsubscribePatchRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.contactsUidUnsubscribePatch(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for contactsGet operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsGetRequest
 */
export type SubscribersContactsApiContactsGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsGet
    */
    readonly accept?: string
    
    /**
    * An email address to search for.
    * @type {string}
    * @memberof SubscribersContactsApiContactsGet
    */
    readonly email?: string
    
    /**
    * How many items should be returned ahead.
    * @type {number}
    * @memberof SubscribersContactsApiContactsGet
    */
    readonly perPage?: number
    
    /**
    * The offset for the items to be returned, helps in pagination.
    * @type {number}
    * @memberof SubscribersContactsApiContactsGet
    */
    readonly page?: number
    
}

/**
 * Request parameters for contactsPost operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsPostRequest
 */
export type SubscribersContactsApiContactsPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsPost
    */
    readonly contentType?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsPost
    */
    readonly accept?: string
    
} & object

/**
 * Request parameters for contactsUidAddTagPost operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidAddTagPostRequest
 */
export type SubscribersContactsApiContactsUidAddTagPostRequest = {
    
    /**
    * (Required) The uid of the contact to update with the tags.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidAddTagPost
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidAddTagPost
    */
    readonly contentType?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidAddTagPost
    */
    readonly accept?: string
    
} & object

/**
 * Request parameters for contactsUidDeletePost operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidDeletePostRequest
 */
export type SubscribersContactsApiContactsUidDeletePostRequest = {
    
    /**
    * (Required) The uid of the contact to delete.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidDeletePost
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidDeletePost
    */
    readonly accept?: string
    
} & object

/**
 * Request parameters for contactsUidGet operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidGetRequest
 */
export type SubscribersContactsApiContactsUidGetRequest = {
    
    /**
    * (Required) The uid of the contact to get.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidGet
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidGet
    */
    readonly accept?: string
    
}

/**
 * Request parameters for contactsUidPatch operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidPatchRequest
 */
export type SubscribersContactsApiContactsUidPatchRequest = {
    
    /**
    * (Required) The uid of the contact to update.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidPatch
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidPatch
    */
    readonly contentType?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidPatch
    */
    readonly accept?: string
    
} & object

/**
 * Request parameters for contactsUidSubscribePatch operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidSubscribePatchRequest
 */
export type SubscribersContactsApiContactsUidSubscribePatchRequest = {
    
    /**
    * (Required) The uid of the contact to subscribe.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidSubscribePatch
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidSubscribePatch
    */
    readonly accept?: string
    
    /**
    * (Required) The uid of the mail list to subscribe the contact.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidSubscribePatch
    */
    readonly listUid?: string
    
} & object

/**
 * Request parameters for contactsUidUnsubscribePatch operation in SubscribersContactsApi.
 * @export
 * @interface SubscribersContactsApiContactsUidUnsubscribePatchRequest
 */
export type SubscribersContactsApiContactsUidUnsubscribePatchRequest = {
    
    /**
    * (Required) The uid of the contact to unsubscribe.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidUnsubscribePatch
    */
    readonly uid: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidUnsubscribePatch
    */
    readonly accept?: string
    
    /**
    * (Required) The uid of the mail list to unsubscribe the contact.
    * @type {string}
    * @memberof SubscribersContactsApiContactsUidUnsubscribePatch
    */
    readonly listUid?: string
    
} & object

/**
 * SubscribersContactsApiGenerated - object-oriented interface
 * @export
 * @class SubscribersContactsApiGenerated
 * @extends {BaseAPI}
 */
export class SubscribersContactsApiGenerated extends BaseAPI {
    /**
     * Returns a list of contacts/subscribers on your account  This endpoint accepts three **optional** query parameters  - `email` â€” An email address to search for. If set, the endpoint only returns subscribers that have an identical email address.      - `per_page` â€” A limit on the number of records to return.      - `page` â€” The parameter serves as an offset on the number of records returned.
     * @summary Get contacts
     * @param {SubscribersContactsApiContactsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsGet(requestParameters: SubscribersContactsApiContactsGetRequest = {}, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new contact/subscriber to your mailing list
     * @summary Add a Contact
     * @param {SubscribersContactsApiContactsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsPost(requestParameters: SubscribersContactsApiContactsPostRequest = {}, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add tags to an existing contact
     * @summary Add tags to a contact
     * @param {SubscribersContactsApiContactsUidAddTagPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidAddTagPost(requestParameters: SubscribersContactsApiContactsUidAddTagPostRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidAddTagPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing contact
     * @summary Delete a contact
     * @param {SubscribersContactsApiContactsUidDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidDeletePost(requestParameters: SubscribersContactsApiContactsUidDeletePostRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidDeletePost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch detailed contact information for specified a contact
     * @summary Get a contact
     * @param {SubscribersContactsApiContactsUidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidGet(requestParameters: SubscribersContactsApiContactsUidGetRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the specified subscriber/contact
     * @summary Update Contact
     * @param {SubscribersContactsApiContactsUidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidPatch(requestParameters: SubscribersContactsApiContactsUidPatchRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidPatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe a contact to a list
     * @summary Subscribe a contact
     * @param {SubscribersContactsApiContactsUidSubscribePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidSubscribePatch(requestParameters: SubscribersContactsApiContactsUidSubscribePatchRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidSubscribePatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unsubscribe a contact from a list
     * @summary Unsubscribe a contact
     * @param {SubscribersContactsApiContactsUidUnsubscribePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersContactsApiGenerated
     */
    public contactsUidUnsubscribePatch(requestParameters: SubscribersContactsApiContactsUidUnsubscribePatchRequest, options?: AxiosRequestConfig) {
        return SubscribersContactsApiFp(this.configuration).contactsUidUnsubscribePatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
